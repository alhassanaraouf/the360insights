I will paste a cookie string now. Please securely store it in Replit Secrets (do not print it to console or logs). Use it to authenticate requests to worldtkd.simplycompete.com and then scrape & save all upcoming competitions' correct eventIds into the Replit DB.

COOKIE TO STORE (exact string):
cookieconsent_dismissed=yes; cf_clearance=r6f58n.Xxk.2YWBQ9fiW.ZvJAn3mQtk1d2hqLGcdbbQ-1758999712-1.2.1.1-7G5n79inZvy07_IACPu9hVWZQPXEumsQOFKblQUu9okkadX0u32V60X8P_PDVuBkhzHIDBDWAMXx1DKLluP4arwn4myBUceYSqvj6BFOp3WZ6ToeU1X7rabB9f37f_qiOLy1xD.kaJKk5PfESiHSpStOho5Qx2gU3_cIphzPOE_xxeawTsawe7P7CJunoxVkSrjXi8C5cbmZ.iEkTJZFwUDh_q3YxVQwAAKg3RoQpFE

TASKS — do these exactly:

1. **Store cookie as secrets**
   - Save the provided cookie into Replit Secrets under:
     - `SIMPLYCOMPETE_FULL_COOKIE` = the entire cookie string above
   - Additionally set helper secrets:
     - `SIMPLYCOMPETE_CF_CLEARANCE` = extract and save the `cf_clearance` token from the cookie (value only)
     - `SIMPLYCOMPETE_COOKIECONSEDISMISSED` = `yes`
   - **Do not print** the cookie values anywhere in logs or stdout.

2. **Use the cookie for requests**
   - For all HTTP requests to `worldtkd.simplycompete.com`, attach the cookie by:
     - Either setting `cookies` on the `requests.Session()` from the stored secret, **or**
     - Setting a `Cookie` header with the secret value.
   - Also include sensible headers: `User-Agent`, `Accept`, `X-Requested-With: XMLHttpRequest`, and `Referer` when calling event-specific endpoints.

3. **Fetch upcoming events (handle pagination)**
   - Call:
     `GET https://worldtkd.simplycompete.com/events/getEvents?status=upcoming&pageNo={page}`
   - Increment `page` until the response contains no more events.
   - Save the full raw JSON to `events_raw.json` for debugging.

4. **Extract eventId and event name**
   - From each event object, extract:
     - `eventId` (or `id`) — the UUID used in participant requests
     - `name` (event name)
     - `date` and `location` if present
   - Sanitize the event name for DB keys (remove slashes, control chars). If a name collision happens, append the eventId to the key.

5. **Verify each eventId**
   - For each extracted eventId, perform a quick validation with:
     `GET https://worldtkd.simplycompete.com/events/getEventParticipant?eventId={eventId}&isHideUnpaidEntries=false&pageNo=0`
   - If that call returns JSON containing a `participantList` array, mark `"verified": true`. Otherwise `"verified": false`.
   - If you receive 403/Cloudflare on validation, return a clear error message (see step 9).

6. **Write to Replit DB**
   - For each event, save an object under a DB key equal to the sanitized event name:
     ```
     db[<sanitized_event_name>] = {
       "eventId": "<uuid>",
       "verified": true|false,
       "date": "<date or empty>",
       "location": "<location or empty>"
     }
     ```
   - Also write a summary file `events_summary.json` containing all events and verification status.

7. **Output**
   - Print a concise summary to the console (do NOT print cookies):
     - total events found
     - total verified
     - a sample list of up to 10 `eventName -> eventId (verified)` entries
   - Save `events_raw.json` and `events_summary.json` in project files for inspection.

8. **Failure behavior**
   - If any request returns `403` or Cloudflare challenge, stop processing and print this exact message:
     `"AUTH REQUIRED — update SIMPLYCOMPETE_FULL_COOKIE in Replit Secrets; scraper stopped due to Cloudflare (403)."`
   - Do not retry indefinitely.